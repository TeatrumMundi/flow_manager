generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                  @id @default(autoincrement())
  email             String               @unique
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  ownedProjects     Project[]            @relation("ProjectOwner")
  assignedProjects  ProjectAssignment[]
  assignedTasks     TaskAssignment[]
  credentials       UserCredential?
  supervisedUsers   UserProfile[]        @relation("Supervisor")
  profile           UserProfile?
  roles             UserRoleAssignment[]
  approvedVacations Vacation[]           @relation("ApprovedBy")
  vacations         Vacation[]
  workLogs          WorkLog[]
}

model UserCredential {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  passwordHash      String
  passwordUpdatedAt DateTime?
  user              User      @relation(fields: [userId], references: [id])
}

model UserProfile {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  firstName         String
  lastName          String
  position          String
  employmentType    String
  supervisorId      Int?
  salaryRate        Decimal
  vacationDaysTotal Int
  supervisor        User?   @relation("Supervisor", fields: [supervisorId], references: [id])
  user              User    @relation(fields: [userId], references: [id])
}

model UserRole {
  id          Int                  @id @default(autoincrement())
  name        String               @unique
  description String?
  users       UserRoleAssignment[]
}

model UserRoleAssignment {
  id     Int      @id @default(autoincrement())
  userId Int
  roleId Int
  role   UserRole @relation(fields: [roleId], references: [id])
  user   User     @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model Project {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  budget      Decimal
  startDate   DateTime
  endDate     DateTime
  isArchived  Boolean             @default(false)
  status      String
  ownerId     Int
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  reports     FinancialReport[]
  owner       User                @relation("ProjectOwner", fields: [ownerId], references: [id])
  assignments ProjectAssignment[]
  costs       ProjectCost[]
  tasks       Task[]
  workLogs    WorkLog[]
}

model ProjectAssignment {
  id            Int      @id @default(autoincrement())
  userId        Int
  projectId     Int
  roleOnProject String
  assignedAt    DateTime
  project       Project  @relation(fields: [projectId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Task {
  id             Int              @id @default(autoincrement())
  projectId      Int
  title          String
  description    String?
  status         String
  estimatedHours Decimal
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  project        Project          @relation(fields: [projectId], references: [id])
  assignments    TaskAssignment[]
  workLogs       WorkLog[]
}

model TaskAssignment {
  id     Int  @id @default(autoincrement())
  taskId Int
  userId Int
  task   Task @relation(fields: [taskId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
}

model WorkLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  taskId      Int?
  projectId   Int
  date        DateTime
  hoursWorked Decimal
  isOvertime  Boolean
  note        String?
  project     Project  @relation(fields: [projectId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Vacation {
  id           Int      @id @default(autoincrement())
  userId       Int
  startDate    DateTime
  endDate      DateTime
  vacationType String
  status       String
  approvedById Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  approvedBy   User?    @relation("ApprovedBy", fields: [approvedById], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model ProjectCost {
  id          Int      @id @default(autoincrement())
  projectId   Int
  type        String
  description String?
  amount      Decimal
  recordedAt  DateTime
  project     Project  @relation(fields: [projectId], references: [id])
}

model FinancialReport {
  id           Int      @id @default(autoincrement())
  projectId    Int
  totalHours   Decimal
  totalCosts   Decimal
  profitMargin Decimal
  reportDate   DateTime
  project      Project  @relation(fields: [projectId], references: [id])
}
